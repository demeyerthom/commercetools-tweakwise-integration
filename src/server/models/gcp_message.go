// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GcpMessage gcp message
//
// swagger:model GcpMessage
type GcpMessage struct {

	// message
	// Required: true
	Message *GcpMessageMessage `json:"message"`

	// The resource endpoint
	// Required: true
	Subscription *string `json:"subscription"`
}

// Validate validates this gcp message
func (m *GcpMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GcpMessage) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	if m.Message != nil {
		if err := m.Message.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("message")
			}
			return err
		}
	}

	return nil
}

func (m *GcpMessage) validateSubscription(formats strfmt.Registry) error {

	if err := validate.Required("subscription", "body", m.Subscription); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this gcp message based on the context it is used
func (m *GcpMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GcpMessage) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if m.Message != nil {
		if err := m.Message.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("message")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GcpMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GcpMessage) UnmarshalBinary(b []byte) error {
	var res GcpMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GcpMessageMessage gcp message message
//
// swagger:model GcpMessageMessage
type GcpMessageMessage struct {

	// attributes
	Attributes map[string]string `json:"attributes,omitempty"`

	// The base64-encoded message data
	// Required: true
	Data *string `json:"data"`

	// message id
	// Required: true
	MessageID *string `json:"message_id"`

	// publish time
	// Required: true
	PublishTime *string `json:"publish_time"`
}

// Validate validates this gcp message message
func (m *GcpMessageMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GcpMessageMessage) validateData(formats strfmt.Registry) error {

	if err := validate.Required("message"+"."+"data", "body", m.Data); err != nil {
		return err
	}

	return nil
}

func (m *GcpMessageMessage) validateMessageID(formats strfmt.Registry) error {

	if err := validate.Required("message"+"."+"message_id", "body", m.MessageID); err != nil {
		return err
	}

	return nil
}

func (m *GcpMessageMessage) validatePublishTime(formats strfmt.Registry) error {

	if err := validate.Required("message"+"."+"publish_time", "body", m.PublishTime); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this gcp message message based on context it is used
func (m *GcpMessageMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GcpMessageMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GcpMessageMessage) UnmarshalBinary(b []byte) error {
	var res GcpMessageMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
