/*
 * Commercetools Tweakwise Integration
 *
 * A service built for managing the Commercetools to Tweakwise integration
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ManageApiController binds http requests to an api service and writes the service results to the http response
type ManageApiController struct {
	service      ManageApiServicer
	errorHandler ErrorHandler
}

// ManageApiOption for how the controller is set up.
type ManageApiOption func(*ManageApiController)

// WithManageApiErrorHandler inject ErrorHandler into controller
func WithManageApiErrorHandler(h ErrorHandler) ManageApiOption {
	return func(c *ManageApiController) {
		c.errorHandler = h
	}
}

// NewManageApiController creates a default api controller
func NewManageApiController(s ManageApiServicer, opts ...ManageApiOption) Router {
	controller := &ManageApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ManageApiController
func (c *ManageApiController) Routes() Routes {
	return Routes{
		{
			"ConnectPost",
			strings.ToUpper("Post"),
			"/connect",
			c.ConnectPost,
		},
		{
			"StartPost",
			strings.ToUpper("Post"),
			"/start",
			c.StartPost,
		},
		{
			"StopPost",
			strings.ToUpper("Post"),
			"/stop",
			c.StopPost,
		},
	}
}

// ConnectPost - Connect the application
func (c *ManageApiController) ConnectPost(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ConnectPost(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// StartPost - Start the application
func (c *ManageApiController) StartPost(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.StartPost(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// StopPost - Stop the application
func (c *ManageApiController) StopPost(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.StopPost(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
