/*
 * Commercetools Tweakwise Integration
 *
 * A service built for managing the Commercetools to Tweakwise integration
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

type GcpSource struct {
	Type string `json:"type"`

	// The ID of the project that contains the Pub/Sub topic
	ProjectId string `json:"project_id"`

	// Name of the product topic
	ProductTopic string `json:"product_topic"`
}

// AssertGcpSourceRequired checks if the required fields are not zero-ed
func AssertGcpSourceRequired(obj GcpSource) error {
	elements := map[string]interface{}{
		"type":          obj.Type,
		"project_id":    obj.ProjectId,
		"product_topic": obj.ProductTopic,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseGcpSourceRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of GcpSource (e.g. [][]GcpSource), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseGcpSourceRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aGcpSource, ok := obj.(GcpSource)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertGcpSourceRequired(aGcpSource)
	})
}
